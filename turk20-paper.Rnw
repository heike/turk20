\documentclass[12pt]{article}
% \usepackage{geometry}                % See geometry.pdf to learn the layout options. There are lots.
% \geometry{letterpaper}                   % ... or a4paper or a5paper or ...
%\usepackage{graphicx}
\usepackage[font=small,skip=5pt]{caption}
\usepackage{subcaption}
\usepackage{afterpage}
\usepackage{amssymb}
\usepackage{natbib}
\usepackage{amsmath}
\usepackage{amsfonts}
% \usepackage{color}
\usepackage{multirow}
\usepackage{rotating}
\usepackage[dvipsnames,svgnames,table]{xcolor}
\usepackage{hyperref}
\graphicspath{{figure/}}
% \usepackage{endfloat} % Figures to the end of the document

\DeclareGraphicsRule{.tif}{png}{.png}{`convert #1 `dirname #1`/`basename #1 .tif`.png}
%---------------------------------------------------
%                 Editing Commands
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\srv}[1]{{\color{orange} #1}}
\newcommand{\eh}[1]{{\color{cyan} #1}}

%---------------------------------------------------
%                 Placing Figures


%---------------------------------------------------
% Define new environment
\newtheorem{theorem}{Theorem}[section]
\newtheorem{algorithm}[theorem]{Algorithm}
%---------------------------------------------------

%\pdfminorversion=4
% NOTE: To produce blinded version, replace "0" with "1" below.
\newcommand{\blind}{0}

% DON'T change margins - should be 1 inch all around.
\addtolength{\oddsidemargin}{-.5in}%
\addtolength{\evensidemargin}{-.5in}%
\addtolength{\textwidth}{1in}%
\addtolength{\textheight}{1.3in}%
\addtolength{\topmargin}{-.8in}%


\begin{document}

%\bibliographystyle{natbib}

\def\spacingset#1{\renewcommand{\baselinestretch}%
{#1}\small\normalsize} \spacingset{1}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\if0\blind
{
  \title{\bf Results from the Turk 20 Study}
  \author{Susan VanderPlas\thanks{
    The authors gratefully acknowledge funding from the National Science Foundation Grant \# DMS 1007697. All data collection has been conducted with approval from the Institutional Review Board IRB 10-347}\hspace{.2cm}\\
    Department of Statistics and Statistical Laboratory, Iowa State University\\
    and \\
    Heike Hofmann\\
    Department of Statistics and Statistical Laboratory, Iowa State University}
  \maketitle
} \fi

\if1\blind
{
  \bigskip
  \bigskip
  \bigskip
  \begin{center}
    {\LARGE\bf Results from Turk Studies 16 and 19}
\end{center}
  \medskip
} \fi

\bigskip
\begin{abstract}
Graphics play a crucial role in statistical analysis and data mining. Being able to quantify structure in data that is visible in plots, and how people read the structure from plots is an ongoing challenge. \hh{XXX just a placeholder}
\end{abstract}

\noindent%
{\it Keywords:}  Visual inference, Lineup protocol, \hh{XXX Other keywords?}.
\vfill

\newpage
\spacingset{1.45} % DON'T change the spacing!

\tableofcontents
\newpage

\hh{List of things to do:
\begin{enumerate}
\item match turk 16 and turk 19 properly: DONE
\item identify minor and major semi axes of ellipses: DONE
\item merge relevant study results in one frame
\item merge minor and major axes with study results
\item include discussion of color scheme: idea: essentially all color schemes give the same result, but the original study gave a bit better performance based on Heer's color scheme with additional tweaks
\end{enumerate}
}

<<setup, echo = FALSE, message = FALSE, warning = FALSE>>=
options(replace.assign=TRUE,width=70, digits=2)
require(knitr)
opts_chunk$set(fig.path='figure/', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE, message=F, warning=F)

library(dplyr)
library(ggplot2)
library(gridExtra)
library(stringr)
source("code/theme_lineup.R")
source("code/generate-lineups.R")

calculate_ellipse_axes <- function(data, vars) {
  dfn <- 2
  dfd <- nrow(data) - 1

  if (dfd < 3) {
    message("Too few points to calculate an ellipse")
    axes <- as.numeric(c(NA, NA))
  } else {
    v <- MASS::cov.trob(data[,vars])
    shape <- v$cov
    chol_decomp <- chol(shape)
    radius <- sqrt(dfn * stats::qf(0.95, dfn, dfd))
    unit.circle <- diag(c(1,1))
    ellipse <- t(radius * t(unit.circle %*% chol_decomp))
    axes <- sort(diag(ellipse))
  }
  names(axes) <- c("minor", "major")
  data.frame(rbind(axes))
}

@

\section{Motivation and Background}
Motivation: in a previous study we noticed that an imbalance in the  size of clusters made participants -depending on the set of aesthetics used- change their target.

\section{Overview of all plots involved}

<<picdetails, echo=FALSE>>=
pics19 <- read.csv("data/picture-details-turk19.csv", stringsAsFactors = FALSE)
t16s <- grep("-turk16", pics19$test_param)
pics19 <- pics19[t16s,]

pics16 <- read.csv("data/picture-details-turk16.csv", stringsAsFactors = FALSE)
pics16$pic_id <- 1:nrow(pics16)

d19 <- file.path("data/lineup-data/turk19")
d16 <- file.path("data/lineup-data/turk16")

parseName <- function(data_name) {
  set <- as.numeric(gsub("set-([0-9]+)-.*", "\\1", data_name))
  k <- as.numeric(gsub(".*-k-([0-9]+)-.*", "\\1", data_name))
  sdtrend <- as.numeric(gsub(".*-sd.?(line|trend)-(0.[0-9]+)-.*", "\\2", data_name))
  sdgroup <- as.numeric(gsub(".*-sd.?group-(0.[0-9]+).*", "\\1", data_name))
  data.frame(set=set, k=k, sdtrend=sdtrend, sdgroup=sdgroup)
}
pics19 <- data.frame(pics19, parseName(pics19$data_name))
pics16 <- data.frame(pics16, parseName(pics16$data_name))

pics16$test_param <- gsub("turk16-", "", pics16$test_param)
pics19$test_param <- gsub("turk18-", "", pics19$test_param)
pics19$test_param <- gsub("-turk16", "", pics19$test_param)

pics <- merge(pics16, pics19, by=c("set", "test_param"))

colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
             "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")

shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)

ks <- list(c(), c(), c(1,4,9), c(), c(3,4,6,7,10))
ss <- list(c(), c(), c(1,3,7), c(), c(1,2,3,5,8))

turk16 <- read.csv("data/turk16_results.csv", stringsAsFactors = FALSE)
turk19 <- read.csv("data/turk19_results_anon.csv", stringsAsFactors = FALSE)
turk16 <- merge(turk16, pics16, by="pic_id")
turk19 <- merge(turk19, pics19, by="pic_id")


getCounts <- function(response) {
  results <- strsplit(response,split=",")
  m <- 20
  wt <- sapply(results, length)
  wt <- 1/rep(wt, wt)
  picks <- factor(as.numeric(unlist(results)), levels=1:20)

  counts <- xtabs(wt~picks)
  as.vector(counts)
}

res16 <- turk16 %>% group_by(pic_id) %>% summarise(
  evals = n(),
  counts = list(getCounts(response_no))
)
res19 <- turk19 %>% group_by(pic_id) %>% summarise(
  evals = n(),
  counts = list(getCounts(response_no))
)

@

<<getellipses, echo=FALSE, warning=FALSE>>=

ellipses <- lapply(1:nrow(pics), function(i) {
  fname <- pics$data_name.x[i]
  dx <- read.csv(file.path("data/lineup-data/turk16", paste0(fname,".csv")))
  ell16 <- dx %>% group_by(.sample, group) %>% 
    do(data.frame(calculate_ellipse_axes(data=., vars = c("x", "y"))))
  names(ell16)[3:4] <- c("minor.16", "major.16")
  ell16$area.16 <- with(ell16, pi*minor.16*major.16)
  
  fname <- pics$data_name.y[i]
  dy <- read.csv(file.path("data/lineup-data/turk19", paste0(fname,".csv")))
  ell19 <- dy %>% group_by(.sample, group) %>% 
    do(data.frame(calculate_ellipse_axes(data=., vars = c("x", "y"))))
  names(ell19)[3:4] <- c("minor.19", "major.19")
  ell19$area.19 <- with(ell19, pi*minor.19*major.19)
  
  merge(ell16, ell19, by=c(".sample", "group"))
})

ellipses.stats <- lapply(1:nrow(pics), function(i) {
  dframe <- ellipses[[i]]
  stats <- dframe %>% group_by(.sample) %>% summarise(
    minor.16=max(minor.16),
    major.16=max(major.16),
    area.16=max(area.16),
    minor.19=max(minor.19),
    major.19=max(major.19),
    area.19=max(area.19)
  )
  data.frame(stats, pics[i,c("pic_id.x", "pic_id.y")])
})

ellipses.stats <- ellipses.stats %>% bind_rows()
@


<<list_of_pics, dependson='picdetails', echo=FALSE, fig.width=6, fig.height=6, out.width='.49\\textwidth'>>=
list_of_pics16 <- lapply(1:nrow(pics), function(i) {
  fname <- pics$data_name.x[i]
  dx <- read.csv(file.path("data/lineup-data/turk16", paste0(fname,".csv")))
  k <- length(unique(dx$group))
  cols <- colors[ks[[k]]]
  xmax =max(dx$x)
  ymin = min(dx$y)
  params <- subset(pics16, pic_id == pics$pic_id.x[i])
  type <- params$test_param
  params <- data.frame(K = k, sd.trend = params$sdtrend, sd.cluster = params$sdgroup, N = 45)
  p <- generateLineup(dx, type, colorp = colors[ks[[k]]], params = params)
  p + geom_text(data=subset(res16, pic_id == pics$pic_id.x[i]),
              aes(label = round(counts[[1]],2)), x = xmax, y = ymin, size = 5,
            colour="grey70", hjust="inward", vjust="inward")
})
list_of_pics19 <- lapply(1:nrow(pics), function(i) {
  fname <- pics$data_name.y[i] 
  dx <- read.csv(file.path(d19, paste0(fname, ".csv")))
  k <- length(unique(dx$group))
  cols <- colors[ks[[k]]]
  xmax =max(dx$x)
  ymin = min(dx$y)
  params <- subset(pics19, pic_id == pics$pic_id.y[i])
  type <- params$test_param
  params <- data.frame(K = k, sd.trend = params$sdtrend, sd.cluster = params$sdgroup, N = 45)
  p <- generateLineup(dx, type, colorp = colors[ks[[k]]], params = params)
  p + geom_text(data=subset(res19, pic_id == pics$pic_id.y[i]),
              aes(label = round(counts[[1]],2)), x = xmax, y = ymin, size = 5,
            colour="grey70", hjust="inward", vjust="inward")
})
@

\begin{figure}
<<set1, dependson='list_of_pics', echo=FALSE, fig.width=12, fig.height=18, out.width='.9\\textwidth'>>=
l16 <- list_of_pics16
l19 <- list_of_pics19

grid.arrange(l16[[1]], l19[[1]], l16[[2]], l19[[2]], l16[[3]], l19[[3]], ncol=2, padding=unit(1, "line"))
@
\end{figure}

\begin{figure}
<<set2, dependson='list_of_pics', echo=FALSE, fig.width=12, fig.height=18, out.width='.9\\textwidth'>>=
l16 <- list_of_pics16[4:6]
l19 <- list_of_pics19[4:6]

grid.arrange(l16[[1]], l19[[1]], l16[[2]], l19[[2]], l16[[3]], l19[[3]], ncol=2, padding=unit(1, "line"))
@
\end{figure}

\begin{figure}
<<set3, dependson='list_of_pics', echo=FALSE, fig.width=12, fig.height=18, out.width='.9\\textwidth'>>=
l16 <- list_of_pics16[7:9]
l19 <- list_of_pics19[7:9]

grid.arrange(l16[[1]], l19[[1]], l16[[2]], l19[[2]], l16[[3]], l19[[3]], ncol=2, padding=unit(1, "line"))
@
\end{figure}

\begin{figure}
<<set4, dependson='list_of_pics', echo=FALSE, fig.width=12, fig.height=18, out.width='.9\\textwidth'>>=
l16 <- list_of_pics16[10:12]
l19 <- list_of_pics19[10:12]

grid.arrange(l16[[1]], l19[[1]], l16[[2]], l19[[2]], l16[[3]], l19[[3]], ncol=2, padding=unit(1, "line"))
@
\end{figure}
\bibliographystyle{asa}
\bibliography{references}

\end{document}
